{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Task = function Task(props) {\n  var _useState = useState('#808080'),\n    _useState2 = _slicedToArray(_useState, 2),\n    circleColor = _useState2[0],\n    setCircleColor = _useState2[1];\n  var toggleCircleColor = function toggleCircleColor() {\n    setCircleColor(circleColor === '#808080' ? '#36457D' : '#808080');\n  };\n  var _useFonts = useFonts({\n      Inter_900Black: Inter_900Black\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsx(TouchableOpacity, {\n    onPress: toggleCircleColor,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        style: styles.text,\n        children: props.desc\n      }), _jsx(Text, {\n        children: props.pontuacao + ' pontos'\n      }), _jsx(View, {\n        style: [styles.circle, {\n          backgroundColor: circleColor\n        }]\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    paddingTop: 15,\n    paddingBottom: 10,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    width: '70%',\n    borderBottomWidth: 1,\n    borderBottomColor: '#ccc'\n  },\n  text: {\n    fontFamily: 'Inter_900Black',\n    fontSize: 18,\n    fontWeight: '700'\n  },\n  circle: {\n    width: 20,\n    height: 20,\n    borderRadius: 10\n  }\n});\nexport default Task;","map":{"version":3,"names":["React","useState","View","Text","StyleSheet","TouchableOpacity","useFonts","Inter_900Black","jsx","_jsx","jsxs","_jsxs","Task","props","_useState","_useState2","_slicedToArray","circleColor","setCircleColor","toggleCircleColor","_useFonts","_useFonts2","fontsLoaded","onPress","children","style","styles","container","text","desc","pontuacao","circle","backgroundColor","create","display","flexDirection","paddingTop","paddingBottom","justifyContent","alignItems","width","borderBottomWidth","borderBottomColor","fontFamily","fontSize","fontWeight","height","borderRadius"],"sources":["C:/Users/Pichau/Documents/Programação/reptask-front/reptask/teste/components/Task.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\r\n\r\nconst Task = (props) => {\r\n  const [circleColor, setCircleColor] = useState('#808080');\r\n\r\n  const toggleCircleColor = () => {\r\n    setCircleColor(circleColor === '#808080' ? '#36457D' : '#808080');\r\n  };\r\n\r\n  let [fontsLoaded] = useFonts({\r\n    Inter_900Black,\r\n  });\r\n\r\n  if (!fontsLoaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <TouchableOpacity onPress={toggleCircleColor}>\r\n      <View style={styles.container}>\r\n        <Text style={styles.text}>{props.desc}</Text>\r\n        <Text>{props.pontuacao + ' pontos'}</Text>\r\n        <View style={[styles.circle, { backgroundColor: circleColor }]} />\r\n      </View>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    paddingTop: 15,\r\n    paddingBottom: 10,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    width: '70%',\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#ccc',\r\n  },\r\n  text: {\r\n    fontFamily: 'Inter_900Black',\r\n    fontSize: 18,\r\n    fontWeight: '700',\r\n  },\r\n  circle: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: 10,\r\n  },\r\n});\r\n\r\nexport default Task;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAExC,SAASC,QAAQ,EAAEC,cAAc,QAAQ,0BAA0B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpE,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAIC,KAAK,EAAK;EACtB,IAAAC,SAAA,GAAsCb,QAAQ,CAAC,SAAS,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAlDG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAElC,IAAMI,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;IAC9BD,cAAc,CAACD,WAAW,KAAK,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC;EACnE,CAAC;EAED,IAAAG,SAAA,GAAoBd,QAAQ,CAAC;MAC3BC,cAAc,EAAdA;IACF,CAAC,CAAC;IAAAc,UAAA,GAAAL,cAAA,CAAAI,SAAA;IAFGE,WAAW,GAAAD,UAAA;EAIhB,IAAI,CAACC,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EAEA,OACEb,IAAA,CAACJ,gBAAgB;IAACkB,OAAO,EAAEJ,iBAAkB;IAAAK,QAAA,EAC3Cb,KAAA,CAACT,IAAI;MAACuB,KAAK,EAAEC,MAAM,CAACC,SAAU;MAAAH,QAAA,GAC5Bf,IAAA,CAACN,IAAI;QAACsB,KAAK,EAAEC,MAAM,CAACE,IAAK;QAAAJ,QAAA,EAAEX,KAAK,CAACgB;MAAI,CAAO,CAAC,EAC7CpB,IAAA,CAACN,IAAI;QAAAqB,QAAA,EAAEX,KAAK,CAACiB,SAAS,GAAG;MAAS,CAAO,CAAC,EAC1CrB,IAAA,CAACP,IAAI;QAACuB,KAAK,EAAE,CAACC,MAAM,CAACK,MAAM,EAAE;UAAEC,eAAe,EAAEf;QAAY,CAAC;MAAE,CAAE,CAAC;IAAA,CAC9D;EAAC,CACS,CAAC;AAEvB,CAAC;AAED,IAAMS,MAAM,GAAGtB,UAAU,CAAC6B,MAAM,CAAC;EAC/BN,SAAS,EAAE;IACTO,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE,EAAE;IACdC,aAAa,EAAE,EAAE;IACjBC,cAAc,EAAE,eAAe;IAC/BC,UAAU,EAAE,QAAQ;IACpBC,KAAK,EAAE,KAAK;IACZC,iBAAiB,EAAE,CAAC;IACpBC,iBAAiB,EAAE;EACrB,CAAC;EACDd,IAAI,EAAE;IACJe,UAAU,EAAE,gBAAgB;IAC5BC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACd,CAAC;EACDd,MAAM,EAAE;IACNS,KAAK,EAAE,EAAE;IACTM,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;AAEF,eAAenC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}